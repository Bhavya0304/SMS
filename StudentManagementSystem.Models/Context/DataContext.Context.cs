//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagementSystem.Models.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BJBhavyaJoshiEntities : DbContext
    {
        public BJBhavyaJoshiEntities()
            : base("name=BJBhavyaJoshiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<SMS_User> SMS_User { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
    
        public virtual ObjectResult<getStudentData_Result> getStudentData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentData_Result>("getStudentData", idParameter);
        }
    
        public virtual ObjectResult<recordput_Result> recordput(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<recordput_Result>("recordput", valueParameter);
        }
    
        public virtual ObjectResult<sp_GetAllUsers_Result> sp_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllUsers_Result>("sp_GetAllUsers");
        }
    
        public virtual ObjectResult<sp_getDoctor_Result> sp_getDoctor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDoctor_Result>("sp_getDoctor", idParameter);
        }
    
        public virtual ObjectResult<string> SP_GetDoctors(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetDoctors", userIDParameter);
        }
    
        public virtual int sp_InsertIntoCity(string cityName, Nullable<int> countryId, Nullable<int> stateId)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoCity", cityNameParameter, countryIdParameter, stateIdParameter);
        }
    
        public virtual int sp_InsertIntoCountry(Nullable<int> id, string countryName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoCountry", idParameter, countryNameParameter);
        }
    
        public virtual int sp_InsertIntoDiagnosis(string diagnosisDetails)
        {
            var diagnosisDetailsParameter = diagnosisDetails != null ?
                new ObjectParameter("DiagnosisDetails", diagnosisDetails) :
                new ObjectParameter("DiagnosisDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoDiagnosis", diagnosisDetailsParameter);
        }
    
        public virtual int sp_InsertIntoMedicine(string medicineName, Nullable<int> diagnosisId)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var diagnosisIdParameter = diagnosisId.HasValue ?
                new ObjectParameter("DiagnosisId", diagnosisId) :
                new ObjectParameter("DiagnosisId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoMedicine", medicineNameParameter, diagnosisIdParameter);
        }
    
        public virtual int sp_InsertIntoState(string stateName, Nullable<int> countryId)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoState", stateNameParameter, countryIdParameter);
        }
    
        public virtual int sp_InsertIntoTreatment(Nullable<int> patientId, Nullable<int> docterId, Nullable<int> nurseId, string diagnosis, string prescription, Nullable<decimal> treatmentFee, Nullable<System.DateTime> dOT, string instruction, ObjectParameter treatmentId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var docterIdParameter = docterId.HasValue ?
                new ObjectParameter("DocterId", docterId) :
                new ObjectParameter("DocterId", typeof(int));
    
            var nurseIdParameter = nurseId.HasValue ?
                new ObjectParameter("NurseId", nurseId) :
                new ObjectParameter("NurseId", typeof(int));
    
            var diagnosisParameter = diagnosis != null ?
                new ObjectParameter("Diagnosis", diagnosis) :
                new ObjectParameter("Diagnosis", typeof(string));
    
            var prescriptionParameter = prescription != null ?
                new ObjectParameter("Prescription", prescription) :
                new ObjectParameter("Prescription", typeof(string));
    
            var treatmentFeeParameter = treatmentFee.HasValue ?
                new ObjectParameter("TreatmentFee", treatmentFee) :
                new ObjectParameter("TreatmentFee", typeof(decimal));
    
            var dOTParameter = dOT.HasValue ?
                new ObjectParameter("DOT", dOT) :
                new ObjectParameter("DOT", typeof(System.DateTime));
    
            var instructionParameter = instruction != null ?
                new ObjectParameter("Instruction", instruction) :
                new ObjectParameter("Instruction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoTreatment", patientIdParameter, docterIdParameter, nurseIdParameter, diagnosisParameter, prescriptionParameter, treatmentFeeParameter, dOTParameter, instructionParameter, treatmentId);
        }
    
        public virtual int sp_InsertIntoUser(string firstName, string lastName, string email, string password, Nullable<int> userTypeId, string address, string mobileNo, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, ObjectParameter userId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoUser", firstNameParameter, lastNameParameter, emailParameter, passwordParameter, userTypeIdParameter, addressParameter, mobileNoParameter, countryIdParameter, stateIdParameter, cityIdParameter, userId);
        }
    
        public virtual int sp_InsertIntoUserType(string userTypeName)
        {
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoUserType", userTypeNameParameter);
        }
    
        public virtual ObjectResult<sp_RegisterPatient_Result> sp_RegisterPatient(string p_FirstName, string p_LastName, string p_Email, string p_Password, string p_Address, string p_Mobile, Nullable<int> p_StateId, Nullable<int> p_CityId, Nullable<int> p_CountryId, Nullable<int> d_DoctorId, Nullable<int> n_NurseId, Nullable<decimal> t_Fee, Nullable<System.DateTime> t_DOT, string i_Details, string dia, string pre)
        {
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("P_FirstName", p_FirstName) :
                new ObjectParameter("P_FirstName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("P_LastName", p_LastName) :
                new ObjectParameter("P_LastName", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("P_Email", p_Email) :
                new ObjectParameter("P_Email", typeof(string));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("P_Password", p_Password) :
                new ObjectParameter("P_Password", typeof(string));
    
            var p_AddressParameter = p_Address != null ?
                new ObjectParameter("P_Address", p_Address) :
                new ObjectParameter("P_Address", typeof(string));
    
            var p_MobileParameter = p_Mobile != null ?
                new ObjectParameter("P_Mobile", p_Mobile) :
                new ObjectParameter("P_Mobile", typeof(string));
    
            var p_StateIdParameter = p_StateId.HasValue ?
                new ObjectParameter("P_StateId", p_StateId) :
                new ObjectParameter("P_StateId", typeof(int));
    
            var p_CityIdParameter = p_CityId.HasValue ?
                new ObjectParameter("P_CityId", p_CityId) :
                new ObjectParameter("P_CityId", typeof(int));
    
            var p_CountryIdParameter = p_CountryId.HasValue ?
                new ObjectParameter("P_CountryId", p_CountryId) :
                new ObjectParameter("P_CountryId", typeof(int));
    
            var d_DoctorIdParameter = d_DoctorId.HasValue ?
                new ObjectParameter("D_DoctorId", d_DoctorId) :
                new ObjectParameter("D_DoctorId", typeof(int));
    
            var n_NurseIdParameter = n_NurseId.HasValue ?
                new ObjectParameter("N_NurseId", n_NurseId) :
                new ObjectParameter("N_NurseId", typeof(int));
    
            var t_FeeParameter = t_Fee.HasValue ?
                new ObjectParameter("T_Fee", t_Fee) :
                new ObjectParameter("T_Fee", typeof(decimal));
    
            var t_DOTParameter = t_DOT.HasValue ?
                new ObjectParameter("T_DOT", t_DOT) :
                new ObjectParameter("T_DOT", typeof(System.DateTime));
    
            var i_DetailsParameter = i_Details != null ?
                new ObjectParameter("I_Details", i_Details) :
                new ObjectParameter("I_Details", typeof(string));
    
            var diaParameter = dia != null ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(string));
    
            var preParameter = pre != null ?
                new ObjectParameter("pre", pre) :
                new ObjectParameter("pre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RegisterPatient_Result>("sp_RegisterPatient", p_FirstNameParameter, p_LastNameParameter, p_EmailParameter, p_PasswordParameter, p_AddressParameter, p_MobileParameter, p_StateIdParameter, p_CityIdParameter, p_CountryIdParameter, d_DoctorIdParameter, n_NurseIdParameter, t_FeeParameter, t_DOTParameter, i_DetailsParameter, diaParameter, preParameter);
        }
    
        public virtual ObjectResult<getTeacherData_Result> getTeacherData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTeacherData_Result>("getTeacherData", idParameter);
        }
    }
}
